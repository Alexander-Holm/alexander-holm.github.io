{"version":3,"sources":["components/Navbar.js","components/Expander.js","components/FullscreenImage.js","images/Code-Ninja.webp","views/KompetensView.js","projects/civilization drafter.js","projects/portfolio site.js","components/TryItButton.js","projects/maze-algorithm.js","projects/pokemon-app.js","projects/@projects.js","components/Carousel.js","components/GithubButton.js","components/Project.js","views/ProjektsView.js","views/KontaktView.js","views/ProfilView.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","useState","isHamburgerOpen","setIsHamburgerOpen","NavItem","item","href","link","className","title","Dropdown","dropdown","map","style","onClick","showTopButton","items","Expander","isExpanded","propsIsExpanded","headerClass","headerStyle","detailsClass","detailsStyle","children","detailsRef","useRef","setIsExpanded","detailsHeight","setDetailsHeight","window","innerWidth","lowPerformanceMode","setLowPerformanceMode","mediaQueryHandler","mediaQuery","matches","useEffect","matchMedia","addEventListener","removeEventListener","detailsContainerStyle","useMemo","height","transition","current","scrollHeight","requestAnimationFrame","ref","onTransitionEnd","FullscreenImage","isFullscreen","isFullscreenProp","src","alt","setIsFullscreen","NonFullscreenImage","createPortal","document","getElementById","KompetensView","id","codeNinja","imageFolder","civilizationDrafter","github","images","url","description","details","portfolioSite","TryItButton","text","target","rel","projects","Carousel","imageContainerRef","currentIndex","setCurrentIndex","isImageFullscreen","setIsImageFullscreen","overlayActive","setOverlayActive","currentImage","changeImage","senderElement","steps","newIndex","length","stopPropagation","arrowButtonsHoverFunctions","onMouseEnter","onMouseLeave","isImageContainerHovered","Array","isArray","element","img","index","GithubButton","Project","marginRight","marginTop","ProjektsView","p","marginLeft","KontaktView","ProfilView","App","navItems","project","hasVerticalMargin","setHasVerticalMargin","isTopMarginVisible","setIsTopMarginVisible","containerVerticalMargin","defaultBorderRadius","containerBorderRadius","setContainerBorderRadius","useLayoutEffect","scrollHandler","pageYOffset","parseFloat","containerWidth","getComputedStyle","documentElement","getPropertyValue","passive","margin","borderRadius","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.bb85517e.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport \"./Navbar.css\"\r\nimport { HiMenu, HiOutlineX } from \"react-icons/hi\";\r\nimport {IoTriangleSharp} from \"react-icons/io5\"\r\n\r\nexport default function Navbar(props){\r\n    const [isHamburgerOpen, setIsHamburgerOpen] = useState(false);\r\n\r\n    const NavItem = ({item}) => (\r\n        <a key={item.title} href={item.link} className=\"nav-item\" >\r\n            {item.title}\r\n        </a>\r\n    );\r\n    const Dropdown = ({item}) => (\r\n        <div className=\"dropdown\">\r\n            <NavItem item={item} />\r\n            <div className=\"dropdown-content\">\r\n                {item.dropdown.map(item => <NavItem item={item} key={item.title} /> )}\r\n            </div>\r\n        </div>\r\n    );\r\n\r\n    return(\r\n        <>\r\n        <nav className=\"navbar\" style={props.style} >\r\n            <button className=\"hamburger\" onClick={() => setIsHamburgerOpen(!isHamburgerOpen)}>\r\n                {isHamburgerOpen\r\n                ? <HiOutlineX />\r\n                : <HiMenu />\r\n                }\r\n            </button>\r\n            {isHamburgerOpen ? <IoTriangleSharp className=\"triangle\"/> : null}\r\n            <div className={`items-container ${isHamburgerOpen ? \"hamburgerOpen\" : \"\"}`}>\r\n               \r\n                <a href=\"#top\" className={props.showTopButton === true ? \"nav-item toTopButton active\" : \"nav-item toTopButton\"}>🡅</a>\r\n                {props.items.map(item => {\r\n                    if(\"dropdown\" in item)\r\n                        return <Dropdown item={item} key={item.title} />\r\n                    else return <NavItem item={item} key={item.title} />\r\n                })}\r\n            </div>\r\n        </nav>\r\n        <div className=\"navbar-border-fix\" />\r\n        </>\r\n    );\r\n}","import { useEffect, useRef, useState, useMemo } from \"react\";\r\nimport \"./Expander.css\"\r\n\r\n// Det går inte att använda css-transition med height:auto.\r\n// height sätts därför när Expander öppnas eller stängs,\r\n// men sätts till auto när transition är klar och Expander är öppen.\r\n\r\n// OBS! \r\n// css transition på height är krävande.\r\n// transition stängs av under en viss width för att inte användas på telefoner.\r\nexport default function Expander({\r\n    isExpanded: propsIsExpanded = true, // alias\r\n    headerClass = \"\",\r\n    headerStyle,\r\n    detailsClass = \"\",\r\n    detailsStyle,\r\n    title,\r\n    style,\r\n    children, // children är det som ligger innanför taggarna, exempel: <Expander> children är det som ligger här </Expander>\r\n\r\n}){\r\n\r\n    const detailsRef = useRef(); \r\n    const [isExpanded, setIsExpanded] = useState(propsIsExpanded);\r\n    const [detailsHeight, setDetailsHeight] = useState(propsIsExpanded ? \"auto\" : 0);\r\n    const lowPerformanceTriggerWidth = 900;\r\n    const [lowPerformanceMode, setLowPerformanceMode] = useState(window.innerWidth < lowPerformanceTriggerWidth);\r\n\r\n    function close(){\r\n        setIsExpanded(false);\r\n        if(lowPerformanceMode)\r\n            setDetailsHeight(0);\r\n        else{            \r\n            setDetailsHeight(detailsRef.current.scrollHeight);\r\n            // requestAnimationFrame körs nästa render,\r\n            // måste ha två stycken av någon anledning...\r\n            requestAnimationFrame(() => requestAnimationFrame(() =>  setDetailsHeight(0)) );\r\n        }\r\n    }\r\n    function open(){\r\n        setIsExpanded(true);\r\n        if(lowPerformanceMode)\r\n            setDetailsHeight(\"auto\"); \r\n        else \r\n            setDetailsHeight(detailsRef.current.scrollHeight); \r\n            // height sätts sedan till \"auto\" av onTransitionEnd i <div>\r\n    }\r\n\r\n    function mediaQueryHandler(mediaQuery){\r\n        setLowPerformanceMode(mediaQuery.matches);\r\n    }\r\n    useEffect(() => {\r\n        const mediaQuery = window.matchMedia(`(max-width: ${lowPerformanceTriggerWidth}px)`);\r\n        mediaQuery.addEventListener(\"change\", mediaQueryHandler);\r\n        return () => mediaQuery.removeEventListener(\"change\", mediaQueryHandler);\r\n      }, []);\r\n\r\n    const detailsContainerStyle = useMemo(() => {\r\n        const style = { height: detailsHeight };\r\n        if(lowPerformanceMode)\r\n            style.transition = \"none\";\r\n        return style;\r\n    },[lowPerformanceMode, detailsHeight])\r\n\r\n    return(\r\n        <div className=\"expander\" style={style}>\r\n\r\n            <div className={`header ${headerClass}`}  style={headerStyle}\r\n                onClick={() => isExpanded ? close() : open()}\r\n            >\r\n                <span className={isExpanded ? \"arrow down\" : \"arrow\"} >&#x203A;</span>\r\n                <span>{title}</span>\r\n            </div>  \r\n\r\n            <div className=\"details-container\" ref={detailsRef}\r\n                style={detailsContainerStyle}\r\n                onTransitionEnd={() =>  isExpanded && setDetailsHeight(\"auto\")}\r\n            >\r\n                <div className={\"details-content \" + detailsClass + (!isExpanded ? \" collapsed\" : \"\")} style={detailsStyle}>\r\n                    {children}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    );\r\n}","import React, {useEffect, useMemo, useState} from 'react';\r\nimport { createPortal } from 'react-dom';\r\nimport  './FullscreenImage.css';\r\n\r\nexport default function FullscreenImage( {\r\n    // props\r\n    isFullscreen: isFullscreenProp = false, \r\n    src, \r\n    alt, \r\n    className, \r\n    style,\r\n}) {\r\n    \r\n    const [isFullscreen, setIsFullscreen] = useState(isFullscreenProp);\r\n    useEffect(() => {\r\n        setIsFullscreen(isFullscreenProp);\r\n    }, [isFullscreenProp]);\r\n\r\n    // Den vanliga bilden visas alltid även bakom fullscreen\r\n    // useMemo för att inte göra en rerender av den när man går in eller ur fullscreen\r\n    const NonFullscreenImage = useMemo(() =>\r\n        <img src={src} alt={alt}\r\n            className={className}\r\n            style={style}\r\n            onClick={() => setIsFullscreen(!isFullscreen)}\r\n        />\r\n        // React klagar på \"unnecessary dependencies\" men de måste vara med\r\n        , [src, alt, className, style, isFullscreen] \r\n    )\r\n\r\n    // createPortal för att lägga FullscreenImage i toppen av HTML DOM.\r\n    // Kan inte lägga den överst med css z-index annars.\r\n    // css stacking context : https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Positioning/Understanding_z_index/The_stacking_context\r\n    const FullscreenImage = createPortal(\r\n        <div className=\"fullscreen-container\" onClick={() => setIsFullscreen(false)} >\r\n            <img src={src} alt={alt}\r\n                className=\"fullscreen-image\"\r\n                style={style}\r\n            />\r\n        </div>\r\n        , document.getElementById(\"root\")\r\n    )\r\n\r\n    return(\r\n        <>\r\n        {/* Den vanliga bilden visas alltid även bakom fullscreen */}\r\n        {NonFullscreenImage}\r\n        \r\n        {isFullscreen &&\r\n            FullscreenImage\r\n        }\r\n        </>\r\n    )\r\n}","export default __webpack_public_path__ + \"static/media/Code-Ninja.6ed5547d.webp\";","import Expander from \"../components/Expander.js\"\r\nimport FullscreenImage from \"../components/FullscreenImage.js\"\r\nimport codeNinja from \"../images/Code-Ninja.webp\"\r\nimport \"./KompetensView.css\"\r\n\r\nexport const KompetensView =\r\n    <section id=\"kompetens\">\r\n        <div className=\"content-section\">\r\n            <h2>Kompetens</h2>            \r\n            <Expander title=\"Programmeringsspråk\" headerClass=\"expander-header\" detailsClass=\"expander-details\">\r\n                <ul>\r\n                    <li>C#</li>\r\n                    <li>JavaScript</li>\r\n                    <li>Lite Java, C och C++ </li>\r\n                </ul>\r\n            </Expander>\r\n            <Expander title=\"Web\" headerClass=\"expander-header\" detailsClass=\"expander-details\">\r\n                <ul>\r\n                    <li>HTML och CSS</li>\r\n                    <li>\r\n                        JavaScript-ramverk\r\n                        <ul>\r\n                            <li>React</li>\r\n                            <li>Svelte</li>\r\n                        </ul>\r\n                    </li>\r\n                    <li>ASP.NET</li>\r\n                    <li>PHP</li>\r\n                </ul>\r\n            </Expander>\r\n            <Expander title=\"Mobil\" headerClass=\"expander-header\" detailsClass=\"expander-details\">\r\n                <ul>\r\n                    <li>Android Studio (Java)</li>\r\n                    <li>React Native</li>\r\n                    <li>Xamarin</li>\r\n                </ul>\r\n            </Expander>\r\n            <Expander title=\"Windows\" headerClass=\"expander-header\" detailsClass=\"expander-details\"  isExpanded={false} >\r\n                <ul>\r\n                    <li>Program gjorda i WPF och UWP</li>\r\n                    <li>Windows Services/tjänster</li>\r\n                </ul>                            \r\n            </Expander>\r\n            <Expander title=\"Databaser och API\" headerClass=\"expander-header\" detailsClass=\"expander-details\"  isExpanded={false} >\r\n                <ul>\r\n                    <li>SQL</li>\r\n                    <li>Entity Relationship (ER) modellering</li>\r\n                    <li>Normalisering av databastabeller</li>\r\n                    <li>.NET Entity Framework</li>\r\n                    <li>REST</li>\r\n                </ul>                            \r\n            </Expander>\r\n            <Expander title=\"IT-säkerhet\"headerClass=\"expander-header\" detailsClass=\"expander-details\" isExpanded={false} >\r\n                <ul>\r\n                    <li>SQL-injektioner</li>                    \r\n                    <li>Cross site scripting (XSS)</li>\r\n                    <li>Lösenordshantering</li>         \r\n                </ul>                            \r\n            </Expander>\r\n            <Expander title=\"Analys och verksamhetsmodellering\"headerClass=\"expander-header\" detailsClass=\"expander-details\" isExpanded={false} >\r\n                <ul>\r\n                    <li>User Stories</li>                    \r\n                    <li>Use Cases</li>\r\n                    <li>Läsa och skriva kravspecifikationer</li>\r\n                    <li>BPMN-diagram</li>                    \r\n                </ul>                            \r\n            </Expander>\r\n            <Expander title=\"En code-ninja ;)\" headerClass=\"expander-header\" detailsClass=\"expander-details\">\r\n                <FullscreenImage src={codeNinja} alt=\"Code ninja award\" className=\"code-ninja\" />\r\n            </Expander>\r\n        </div>\r\n        <hr/>\r\n    </section>","const imageFolder = \"images/projects/civilization drafter/\";\r\n\r\nexport const civilizationDrafter = {\r\n\ttitle : \"Civilization Drafter\",\r\n    id : \"Civilization-Drafter\",\r\n\tgithub : \"https://github.com/Alexander-Holm/civilization-drafter\",\r\n\timages : [\r\n\t\t{url: imageFolder + \"1.png\", description: \"Första sidan\"},  \r\n\t\t{url: imageFolder + \"quick-toggle.gif\", description: \"[GIF] Quick-toggle\"},\r\n        {url: imageFolder + \"minimum.gif\", description: \"[GIF] Knappen stängs av/på\"},\r\n\t\t{url: imageFolder + \"results.png\", description: \"Resultat-sidan\"},\r\n\t\t{url: imageFolder + \"copyText.png\", description: \"Kopiera resultat som text\"},\r\n\t\t{url: imageFolder + \"copyImage.png\", description: \"Bilden man får när man kopierar resultatet som bild\"},\r\n\t],\r\n\tdescription: \r\n        <>\r\n        <p>\r\n            Ett program som slumpar fram länder från spelet Civilization VI och fördelar till spelare. \r\n            Resultatet går att kopiera som text eller bild så att man enkelt kan dela det med andra för multiplayer.    \r\n        </p>\r\n        <p>\r\n            Användaren kan välja till eller bort vilka länder som kan slumpas ut till spelarna.\r\n            Minsta antalet länder som behöver väljas och antalet nuvarande valda visas samt uppdateras av förändringar.\r\n            Är inte tillräckligt många valda går det inte att fortsätta till lottningen.\r\n            En ”quick-toggle” sätter på eller stänger av alla länder som hör till en viss expansion. \r\n            Inställningarna och vilka länder som är valda går att spara så att de är förvalda nästa gång programmet öppnas.\r\n        </p>\r\n        <p>\r\n            Länderna läses från en JSON-fil så det finns möjlighet att lägga till nya i efterhand utan att ändra i .exe-filen. \r\n        </p>\r\n        </>,\r\n    details: \r\n        <div>\r\n            <ul>\r\n                <li>\r\n                    Gjord i Windows Presentation Foundation (WPF)\r\n                    <ul>\r\n                        <li>C#</li>\r\n                        <li>XAML för GUI</li>\r\n                        <li>\r\n                            Model View ViewModel - arkitektur\r\n                            <ul>\r\n                                <li>Data binding</li>\r\n                            </ul>\r\n                        </li>\r\n                    </ul>\r\n                </li>\r\n                <li>Läsa och skriva till filer med JSON</li>\r\n                <li>Unit testing med xUnit</li>         \r\n                <li>\r\n                    Windowsfunktioner\r\n                    <ul>\r\n                        <li>Fönster-ikon</li> \r\n                        <li>Ikon för .exe</li>   \r\n                        <li>Kopiera till Clipboard/Urklipp</li>\r\n                    </ul>\r\n                </li>           \r\n            </ul>\r\n        </div>\r\n}","const imageFolder = \"images/projects/portfolio-site/\";\r\n\r\nexport const portfolioSite = {\r\n\ttitle : \"Portfolio site\",\r\n    id : \"Portfolio-site\",\r\n\tgithub : \"https://google.com\",\r\n\timages : [\r\n        {url: imageFolder + \"1.png\", description: \"Portfolio site\"},\r\n        {url: imageFolder + \"carousel.png\", description: \"Bildspel\"},\r\n        {url: imageFolder + \"fullscreen.png\", description: \"Bild i fullscreen\"},\r\n        {url: imageFolder + \"expander1.png\", description: \"Expander\"},\r\n        {url: imageFolder + \"expander2.png\", description: \"Samma Expander med ett annat utseende\"},\r\n\t],\r\n\tdescription: \r\n        <>\r\n        <p>\r\n            Den här hemsidan är tänkt att fungera som ett utökat CV där jag kan visa upp olika projekt med bilder och beskrivningar.\r\n        </p>\r\n        <p>\r\n            Skapad med React och anpassad för olika skärmstorlekar. Flera components, t.ex. expanders, återanvänds enkelt på olika ställen.\r\n        </p>\r\n        </>,\r\n    details: \r\n        <ul>\r\n            <li>\r\n                Skapad med React\r\n                <ul>\r\n                    <li>HTML</li>\r\n                    <li>CSS</li>\r\n                    <li>Javascript</li>\r\n                    <li>Egna components\r\n                        <ul>\r\n                            <li>Navbar</li>\r\n                            <li>Bildspel</li>\r\n                            <li>Expander</li>\r\n                            <li>Fullscreen bild</li>\r\n                            <li>Knappar</li>\r\n                        </ul>\r\n                    </li>\r\n                </ul>\r\n            </li>\r\n            <li>Webbläsar- och mobilinställningar\r\n                <ul>\r\n                    <li>Fliknamn</li>\r\n                    <li>Ikoner</li>\r\n                </ul>\r\n            </li>\r\n            \r\n        </ul>\r\n}","import \"./TryItButton.css\"\r\nexport default function TryItButton ( { text = \"Testa på GitHub Pages\", url, style } ) {\r\n    return(\r\n        <a href={url} target=\"_blank\" rel=\"noreferrer\" \r\n            className=\"try-it-button\" style={style}\r\n        >\r\n            {text}\r\n        </a>\r\n    )\r\n}","import TryItButton from \"../components/TryItButton\";\r\n\r\nconst imageFolder = \"images/projects/maze-algorithm/\";\r\n\r\nexport const mazeAlgorithm = {\r\n    title : \"Labyrint-skapare\",\r\n    id : \"Labyrint-skapare\",\r\n\tgithub : \"https://github.com/Alexander-Holm/maze-algorithm\",\r\n\timages : [\r\n\t\t{url: imageFolder + \"1.png\", description: null},  \r\n        {url: imageFolder + \"controls.gif\", description: \"[GIF] Kontroller för uppspelning\"},\r\n\t\t{url: imageFolder + \"speed.gif\", description: \"[GIF] Ändra hastighet\"},\r\n        {url: imageFolder + \"color.gif\", description: \"[GIF] Ändra färger med <input type='color'/>\"},\r\n\t],\r\n\tdescription: \r\n        // &nbsp; = mellanslag\r\n        <>            \r\n        <p>\r\n            Visar steg för steg när en labyrint skapas med en&nbsp;\r\n            <a href=\"https://en.wikipedia.org/wiki/Maze_generation_algorithm#Randomized_depth-first_search\" target=\"_blank\" rel=\"noreferrer\">\r\n                Randomized depth-first search / Recursive backtracker\r\n            </a>\r\n            -algoritm.\r\n        </p>            \r\n        <p>                \r\n            Använder Javascripts&nbsp;\r\n            <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Generator\" target=\"_blank\" rel=\"noreferrer\">\r\n                generator functions\r\n            </a>\r\n            &nbsp;för att gå genom algoritmen ett steg i taget.\r\n            Det gör det möjligt att spela upp automatiskt eller ett steg i taget manuellt.\r\n        </p>\r\n        <p>\r\n            Det finns också några roliga inställningar att leka med: storlek, hastighet och färger.\r\n        </p>\r\n        <TryItButton url=\"https://alexander-holm.github.io/maze-algorithm/\" />\r\n        </>,\r\n    details: \r\n        <ul>\r\n            <li> Gjord med Svelte (JavaScript framework)\r\n                <ul>\r\n                    <li>HTML</li>\r\n                    <li>CSS</li>\r\n                    <li>Javascript</li>\r\n                </ul>\r\n            </li>\r\n            <li> Generator functions\r\n                <ul>\r\n                    <li>Automatisk uppspelning som går att pausa, starta, stega, och ändra hastighet på</li>\r\n                </ul>\r\n            </li>\r\n            <li> Kontroller för uppspelning\r\n                <ul>                    \r\n                    <li>Starta automatisk uppspelning med en viss tid mellan varje steg</li>\r\n                    <li>Pausa den automatiska uppspelningen</li>\r\n                    <li>Spela upp ett steg i taget manuellt</li>\r\n                    <li>Gör klar hela labyrinten direkt (alla steg)</li>\r\n                    <li>Börja om med en ny labyrint</li>\r\n                </ul>\r\n            </li>\r\n            <li> Gränssnittet reflekterar vilket tillstånd koden är i\r\n                <ul>\r\n                    <li>Uppspelnings-knapparna stängs av när de inte kan användas</li>\r\n                    <li>Visar vilket värde sliders ligger på</li>\r\n                    <li>Labyrinten uppdateras så man kan följa varje steg i algoritmen</li>\r\n                </ul>\r\n            </li>\r\n        </ul>\r\n}","const imageFolder = \"images/projects/pokemon-app/\";\r\n\r\nexport const pokemonApp = {\r\n\ttitle : \"Pokemon app\",\r\n    id : \"Pokemon-app\",\r\n\tgithub : \"https://github.com/Alexander-Holm/pokemon-app\",\r\n\timages : [\r\n\t\t{url: imageFolder + \"types.png\", description: \"Första sidan visar alla typer av Pokemon\"},\r\n        {url: imageFolder + \"search.png\", description: \"Sökfunktionen\"},\r\n        {url: imageFolder + \"grass.png\", description: \"Lista med Grass-types\"},\r\n        {url: imageFolder + \"header.png\", description: \"Header med namn och ikon för typen\"},\r\n        {url: imageFolder + \"poison.png\", description: \"Lista med Poison-types\"},\r\n        {url: imageFolder + \"psychic.png\", description: \"Lista med Psychic-types\"},\r\n        {url: imageFolder + \"starmie.png\", description: \"Detaljsidan för Starmie\"},\r\n        {url: imageFolder + \"charizard.png\", description: \"Detaljsidan för Charizard\"},\r\n\t],\r\n\tdescription:\r\n        // &nbsp; = mellanslag\r\n        <>\r\n        <p>\r\n            En mobil applikation som hämtar data från&nbsp;\r\n            <a href=\"https://pokeapi.co/\" target=\"_blank\" rel=\"noreferrer\">\r\n                PokéApi\r\n            </a>.\r\n        </p> \r\n        <p>\r\n            Användaren väljer en typ av Pokemon och får då en lista med alla Pokemon av den typen.\r\n            En anpassad header med namn och ikon för typen som visas.\r\n            Varje Pokemon visas på ett kort som har olika färger baserat på sina typer.\r\n        </p>\r\n        <p>\r\n            Går man in på en Pokemon får man se mer detaljerad information.\r\n            Samma component som används för Pokemon-kortens bakgrundsfärger återanvänds på detaljsidan för en banderoll.\r\n        </p>\r\n        <p>\r\n            Det finns också en sökfunktion där man kan gå direkt från startsidan till en Pokemons detaljsida.\r\n        </p>\r\n        </>\r\n    ,details: \r\n        <div>\r\n            <ul>\r\n                <li>Gjord med React Native för både Android och iOS\r\n                    <ul>\r\n                        <li>Javascript</li>\r\n                    </ul>\r\n                </li>\r\n                <li>Hämtar data från API</li>  \r\n                <li>Header med ikoner och dynamisk text</li>\r\n                <li>Component som kan återanvändas med olika utseende</li>\r\n            </ul>\r\n        </div>\r\n}","import { civilizationDrafter } from \"./civilization drafter\"\r\nimport { portfolioSite } from \"./portfolio site\"\r\nimport { mazeAlgorithm } from \"./maze-algorithm\"\r\nimport { pokemonApp } from \"./pokemon-app\"\r\n\r\nexport const projects = [\r\n    mazeAlgorithm,\r\n    civilizationDrafter,\r\n    pokemonApp,\r\n    portfolioSite,\r\n]","import React, {useMemo, useRef, useState} from 'react';\r\nimport  './Carousel.css';\r\nimport {MdKeyboardArrowLeft, MdKeyboardArrowRight ,MdSearch} from \"react-icons/md\"\r\nimport FullscreenImage from './FullscreenImage';\r\n\r\nexport default function Carousel(props){\r\n\r\n    const imageContainerRef = useRef();\r\n    const [images] = useState(props.images);\r\n    const [currentIndex, setCurrentIndex] = useState(0);\r\n    const [isImageFullscreen, setIsImageFullscreen] = useState(false);\r\n    const [overlayActive, setOverlayActive] = useState(false);\r\n    \r\n    // useMemo för att inte uppdatera bilden varje gång overlayActive ändras av mouse-hover\r\n    const currentImage = useMemo(() => \r\n        <FullscreenImage\r\n            src={images[currentIndex].url}\r\n            className=\"image\" \r\n            isFullscreen={isImageFullscreen}\r\n        />\r\n        ,[currentIndex, isImageFullscreen, images]\r\n    )        \r\n\r\n    function changeImage(senderElement, steps){\r\n        // steps kan vara positivt för att gå framåt eller negativt för att gå bakåt\r\n\r\n        // Loopar runt om index är negativt eller hamnar utanför images.length\r\n        const newIndex = (currentIndex + steps + images.length) % images.length;\r\n        setCurrentIndex(newIndex);\r\n        // Förhindrar onClick på element bakom next & prev knapparna\r\n        senderElement.stopPropagation();\r\n    }\r\n    const arrowButtonsHoverFunctions = {\r\n        onMouseEnter: () => setOverlayActive(false),\r\n        onMouseLeave: () => {\r\n            const isImageContainerHovered = imageContainerRef.current.matches(\":hover\");\r\n            setOverlayActive(isImageContainerHovered);\r\n        },\r\n    }\r\n    function onClickImageContainer(senderElement){\r\n        setOverlayActive(false);\r\n        setIsImageFullscreen(!isImageFullscreen); \r\n        // Förhindrar onClick på <FullScreenImage>\r\n        senderElement.stopPropagation();\r\n    }\r\n\r\n    // Måste ligga under state, får inte lägga conditions innan hooks (useState, useMemo osv.)\r\n    if(Array.isArray(props.images) === false || props.images.length < 1)\r\n        return null;\r\n\r\n    return(\r\n        <div className=\"carousel\">\r\n            {/* Border som div för att inte få hover-effekt när muspekaren är över bordern */}\r\n            <div className=\"image-container border\">\r\n                <div className=\"image-container inner\" ref={imageContainerRef} \r\n                    onClick={(element) => onClickImageContainer(element)}\r\n                    onMouseEnter={() => setOverlayActive(true)} onMouseLeave={() => setOverlayActive(false)}\r\n                >\r\n                    {/* Hover overlay */}\r\n                    {/* overlay har pointer-events:none för att högerklick ska fungera korrekt på bilderna */}\r\n                    <div className={overlayActive ? \"overlay active\" : \"overlay\"} >\r\n                        <MdSearch className=\"icon-inspect\"/>\r\n                    </div>\r\n\r\n                    {/* Framåt & bakåt knappar */}\r\n                    <button className=\"prev-image\" {...arrowButtonsHoverFunctions} onClick={(element) => changeImage(element, -1)} >                        \r\n                        <MdKeyboardArrowLeft />\r\n                    </button>\r\n                    <button className=\"next-image\" {...arrowButtonsHoverFunctions} onClick={(element) => changeImage(element, +1)} >\r\n                        <MdKeyboardArrowRight />\r\n                    </button>\r\n                    \r\n                    {/* Bild */}\r\n                    {currentImage}\r\n\r\n                </div>\r\n            </div>\r\n\r\n            {/* Bildbeskrivning */}\r\n            {/* OBS! Bryter av för lång text */}            \r\n            <div className=\"image-description-container\" >\r\n                {/* Texten måste ha en container/wrapper för att text-overflow ska fungera med width i procent. */}\r\n                {/* key för få en rerender när bilderna byts, behövs för animation */}\r\n                <span className=\"text\" key={currentIndex}>\r\n                    {images[currentIndex].description}\r\n                </span>\r\n            </div>\r\n\r\n            {/* Dots */}\r\n            <div className=\"dot-container\">\r\n                {images.map((img, index) => {\r\n                    return(\r\n                        <span key={index} onClick={() => setCurrentIndex(index)}\r\n                            className={(currentIndex === index) ? \"dot active\" : \"dot\" }  />\r\n                    );\r\n                })}\r\n            </div> \r\n        </div>\r\n    );\r\n}","import \"./GithubButton.css\"\r\nimport {DiGithubBadge, DiGithubFull} from \"react-icons/di\"\r\n\r\nexport default function GithubButton(props){\r\n    return(\r\n        <a href={props.url} target=\"_blank\" rel=\"noreferrer\" \r\n            className=\"github-button\" style={props.style}\r\n        >\r\n            <DiGithubBadge className=\"logo\" />\r\n            <DiGithubFull className=\"text\" />\r\n        </a>\r\n    );\r\n}","import '../App.css';\r\nimport './Project.css';\r\nimport Carousel from './Carousel.js';\r\nimport GithubButton from './GithubButton';\r\nimport Expander from './Expander';\r\n\r\nexport default function Project({\r\n    title,\r\n    id,\r\n    github,\r\n    images,\r\n    description,\r\n    details\r\n}){    \r\n    return(\r\n        <div id={id} className=\"content-section project-container\" >\r\n            <div className=\"content-section header\" >\r\n                <h3 style={{marginRight: \"15px\"}}>{title}</h3>\r\n                {github && <GithubButton url={github} />}\r\n            </div>\r\n            \r\n            <Carousel images={images}/>\r\n\r\n            <div className=\"content-section description\" >\r\n                {description}\r\n                <Expander title=\"Detaljer\" style={{marginTop:\"20px\"}} isExpanded={true}> {details} </Expander>\r\n            </div>\r\n\r\n        </div>\r\n    );\r\n}","import \"./ProjektsView.css\"\r\nimport {projects} from '../projects/@projects'\r\nimport {GiFallDown} from \"react-icons/gi\"\r\nimport Project from '../components/Project.js'\r\n\r\nexport const ProjektsView =\r\n    <section id=\"projekt\">\r\n        <h2>Projekt</h2>\r\n        <div className=\"content-section projects-overview\">\r\n            {projects.map(p => {\r\n                return(\r\n                    <a key={p.title} className=\"project\" href={\"#\" + p.id}>\r\n                        <div className=\"image-wrapper\" >\r\n                            <img src={p.images[0].url} alt={p.title + \" thumbnail\"} />\r\n                            <div className=\"overlay\">Scrolla till <GiFallDown style={{marginLeft:\"5px\"}}/> </div>\r\n                        </div>\r\n                        <p>{p.title}</p>\r\n                    </a>\r\n                );\r\n            })}\r\n        </div>\r\n\r\n        {projects.map(p => {\r\n            return(\r\n                <>\r\n                <Project \r\n                    key = {p.title}\r\n                    title = {p.title}\r\n                    id = {p.id}\r\n                    github = {p.github}\r\n                    images= {p.images}\r\n                    description = {p.description}\r\n                    details = {p.details}\r\n                /> \r\n                <hr/>\r\n                </>  \r\n            );\r\n        })}\r\n    </section>","import \"./KontaktView.css\"\r\nimport {GoMail} from \"react-icons/go\"\r\nimport {VscFilePdf} from \"react-icons/vsc\"\r\n\r\nexport const KontaktView =\r\n    <section id=\"kontakt\">\r\n        <div className=\"content-section\">\r\n            <h2>Kontakt &amp; CV</h2>\r\n\r\n            <div id=\"email\">\r\n                <h4>Email:</h4>\r\n                <p>alex.holm@live.com</p>\r\n                <a href=\"mailto:alex.holm@live.com\">\r\n                    <GoMail className=\"icon\"/>\r\n                </a>                            \r\n            </div>\r\n\r\n            <a id=\"cv\" href=\"https://www.google.com\" target=\"_blank\" rel=\"noreferrer\">\r\n                <h4>CV</h4>\r\n                <VscFilePdf className=\"icon\"/>\r\n            </a>\r\n\r\n        </div>\r\n    </section>","import \"./ProfilView.css\"\r\n\r\nexport const ProfilView =\r\n    <section>\r\n        <div className=\"content-section\">\r\n            {/* <img className=\"profile-image\" src=\"../images/portrait.png\" alt=\"Profilbild\" /> */}\r\n            <h1>Alexander Holm</h1>\r\n            <div> \r\n                <p>\r\n                    Jag är en 27 år gammal junior-utvecklare med intresse för allt möjligt inom programmering.\r\n                    Webbutveckling, mobila applikationer och API:er är det jag har mest erfarenhet av, främst med Javascript och C#.                   \r\n                </p>\r\n                <p>\r\n                    Förutom att skriva kod har jag också kunskaper som är användbara i den större systemutvecklingsprocessen:\r\n                    databasmodellering, testning, IT-säkerhet, samt krav- och verksamhetsanalysering.\r\n                </p>\r\n                <p>\r\n                    Här nedanför hittar du några av mina projekt och mer om vad jag har erfarenhet av.\r\n                </p>                \r\n            </div>\r\n        </div>\r\n        <hr/>\r\n    </section>","import { useLayoutEffect, useState } from 'react'\nimport './App.css'\nimport Navbar from './components/Navbar'\nimport {KompetensView} from './views/KompetensView'\nimport { ProjektsView } from './views/ProjektsView'\nimport { KontaktView } from './views/KontaktView'\nimport { ProfilView } from './views/ProfilView'\nimport { projects } from './projects/@projects'\n\nfunction App() {  \n\n    const navItems = [\n        {title: \"Projekt\", link: \"#projekt\", dropdown: projects.map(project => ({title: project.title, link: `#${project.id}`}) ) },\n        {title: \"Kompetens\", link: \"#kompetens\"},\n        {title: \"Kontakt\", link: \"#kontakt\"},\n    ]\n\n    const [hasVerticalMargin, setHasVerticalMargin] = useState()\n    const [isTopMarginVisible, setIsTopMarginVisible] = useState(true)\n    const [containerVerticalMargin] = useState(\"50px\");\n    const [defaultBorderRadius] = useState(\"5px\");\n    const [containerBorderRadius, setContainerBorderRadius] = useState(defaultBorderRadius)\n\n    \n    useLayoutEffect(() => {    \n        const scrollHandler = () => {\n            // parsefloat tar bort tecken efter ett nummer, t.ex. 'px'\n            if( window.pageYOffset > parseFloat(containerVerticalMargin, 10))\n                setIsTopMarginVisible(false);            \n            else setIsTopMarginVisible(true);\n        }\n        const mediaQueryHandler = (mediaQuery) => {\n            if(mediaQuery.matches){\n                setHasVerticalMargin(false);\n                setContainerBorderRadius(0)\n            }\n            else{\n                setHasVerticalMargin(true);\n                scrollHandler();\n                setContainerBorderRadius(defaultBorderRadius)\n            }\n        }\n\n        /* --- Höjer upp containern när bakgrunden inte längre syns på sidorna --- */\n        /* max-width lite större än width för .container eftersom Firefox inte räknar med scrollbar i width.*/\n        /* För tidigt ser bättre ut än för sent. */\n        const containerWidth = getComputedStyle(document.documentElement).getPropertyValue('--container-width');\n        const mediaQuery = window.matchMedia(`(max-width: calc(${containerWidth} + 20px))`);\n        mediaQuery.addEventListener(\"change\", mediaQueryHandler);      \n        \n        window.addEventListener(\"scroll\", scrollHandler, {passive: true} );\n\n        mediaQueryHandler(mediaQuery);        \n\n        return () => {\n             mediaQuery.removeEventListener(\"change\", mediaQueryHandler);\n             window.removeEventListener(\"scroll\", scrollHandler);\n        };\n    }, [containerVerticalMargin, defaultBorderRadius])\n\n    return (  \n        <div className=\"container\" style={{margin: hasVerticalMargin ? `${containerVerticalMargin}  auto` : \"0 auto\"}}>\n            <Navbar items={navItems} showTopButton={!isTopMarginVisible} style={{borderRadius: `${containerBorderRadius} ${containerBorderRadius} 0 0`}}/>\n\n            <div className=\"content\" style={{borderRadius: `0 0 ${containerBorderRadius} ${containerBorderRadius}`}}>\n                {ProfilView}\n                {ProjektsView}\n                {KompetensView}\n                {KontaktView}\n            </div> \n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}